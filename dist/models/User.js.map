{"version":3,"sources":["../../src/models/User.js"],"names":["mongoose","require","uniqueValidator","crypto","secret","UserSchema","Schema","username","type","String","lowercase","unique","required","match","index","email","bio","image","favorites","Types","ObjectId","ref","following","hash","salt","timestamps","plugin","message","methods","validPassword","password","pbkdf2Sync","toString","setPassword","randomBytes","toAuthJSON","model"],"mappings":";;AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMC,eAAe,GAAGD,OAAO,CAAC,2BAAD,CAA/B;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,WAAD,CAAP,CAAqBG,MAApC;;AAEA,IAAMC,UAAU,GAAG,IAAIL,QAAQ,CAACM,MAAb,CACf;AACIC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,IAAI,EAAEC,MADA;AAENC,IAAAA,SAAS,EAAE,IAFL;AAGNC,IAAAA,MAAM,EAAE,IAHF;AAINC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,gBAAP,CAJJ;AAKNC,IAAAA,KAAK,EAAE,CAAC,gBAAD,EAAmB,YAAnB,CALD;AAMNC,IAAAA,KAAK,EAAE;AAND,GADd;AASIC,EAAAA,KAAK,EAAE;AACHP,IAAAA,IAAI,EAAEC,MADH;AAEHC,IAAAA,SAAS,EAAE,IAFR;AAGHC,IAAAA,MAAM,EAAE,IAHL;AAIHC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,gBAAP,CAJP;AAKHC,IAAAA,KAAK,EAAE,CAAC,cAAD,EAAiB,YAAjB,CALJ;AAMHC,IAAAA,KAAK,EAAE;AANJ,GATX;AAiBIE,EAAAA,GAAG,EAAEP,MAjBT;AAkBIQ,EAAAA,KAAK,EAAER,MAlBX;AAmBIS,EAAAA,SAAS,EAAE,CAAC;AAAEV,IAAAA,IAAI,EAAER,QAAQ,CAACM,MAAT,CAAgBa,KAAhB,CAAsBC,QAA9B;AAAwCC,IAAAA,GAAG,EAAE;AAA7C,GAAD,CAnBf;AAoBIC,EAAAA,SAAS,EAAE,CAAC;AAAEd,IAAAA,IAAI,EAAER,QAAQ,CAACM,MAAT,CAAgBa,KAAhB,CAAsBC,QAA9B;AAAwCC,IAAAA,GAAG,EAAE;AAA7C,GAAD,CApBf;AAqBIE,EAAAA,IAAI,EAAEd,MArBV;AAsBIe,EAAAA,IAAI,EAAEf;AAtBV,CADe,EAyBf;AAAEgB,EAAAA,UAAU,EAAE;AAAd,CAzBe,CAAnB;AA4BApB,UAAU,CAACqB,MAAX,CAAkBxB,eAAlB,EAAmC;AAAEyB,EAAAA,OAAO,EAAE;AAAX,CAAnC;;AAEAtB,UAAU,CAACuB,OAAX,CAAmBC,aAAnB,GAAmC,UAASC,QAAT,EAAmB;AAClD,MAAMP,IAAI,GAAGpB,MAAM,CACd4B,UADQ,CACGD,QADH,EACa,KAAKN,IADlB,EACwB,KADxB,EAC+B,GAD/B,EACoC,QADpC,EAERQ,QAFQ,CAEC,KAFD,CAAb;AAGA,SAAO,KAAKT,IAAL,KAAcA,IAArB;AACH,CALD;;AAOAlB,UAAU,CAACuB,OAAX,CAAmBK,WAAnB,GAAiC,UAASH,QAAT,EAAmB;AAChD,OAAKN,IAAL,GAAYrB,MAAM,CAAC+B,WAAP,CAAmB,EAAnB,EAAuBF,QAAvB,CAAgC,KAAhC,CAAZ;AACA,OAAKT,IAAL,GAAYpB,MAAM,CACb4B,UADO,CACID,QADJ,EACc,KAAKN,IADnB,EACyB,KADzB,EACgC,GADhC,EACqC,QADrC,EAEPQ,QAFO,CAEE,KAFF,CAAZ;AAGH,CALD;;AAOA3B,UAAU,CAACuB,OAAX,CAAmBO,UAAnB,GAAgC,YAAW;AACvC,SAAO;AACH5B,IAAAA,QAAQ,EAAE,KAAKA,QADZ;AAEHQ,IAAAA,KAAK,EAAE,KAAKA;AAFT,GAAP;AAIH,CALD;;AAOAf,QAAQ,CAACoC,KAAT,CAAe,MAAf,EAAuB/B,UAAvB","sourcesContent":["const mongoose = require(\"mongoose\");\nconst uniqueValidator = require(\"mongoose-unique-validator\");\nconst crypto = require(\"crypto\");\nconst secret = require(\"../config\").secret;\n\nconst UserSchema = new mongoose.Schema(\n    {\n        username: {\n            type: String,\n            lowercase: true,\n            unique: true,\n            required: [true, \"can't be blank\"],\n            match: [/^[a-zA-Z0-9]+$/, \"is invalid\"],\n            index: true\n        },\n        email: {\n            type: String,\n            lowercase: true,\n            unique: true,\n            required: [true, \"can't be blank\"],\n            match: [/\\S+@\\S+\\.\\S+/, \"is invalid\"],\n            index: true\n        },\n        bio: String,\n        image: String,\n        favorites: [{ type: mongoose.Schema.Types.ObjectId, ref: \"Article\" }],\n        following: [{ type: mongoose.Schema.Types.ObjectId, ref: \"User\" }],\n        hash: String,\n        salt: String\n    },\n    { timestamps: true }\n);\n\nUserSchema.plugin(uniqueValidator, { message: \"is already taken.\" });\n\nUserSchema.methods.validPassword = function(password) {\n    const hash = crypto\n        .pbkdf2Sync(password, this.salt, 10000, 512, \"sha512\")\n        .toString(\"hex\");\n    return this.hash === hash;\n};\n\nUserSchema.methods.setPassword = function(password) {\n    this.salt = crypto.randomBytes(16).toString(\"hex\");\n    this.hash = crypto\n        .pbkdf2Sync(password, this.salt, 10000, 512, \"sha512\")\n        .toString(\"hex\");\n};\n\nUserSchema.methods.toAuthJSON = function() {\n    return {\n        username: this.username,\n        email: this.email\n    };\n};\n\nmongoose.model(\"User\", UserSchema);\n"],"file":"User.js"}