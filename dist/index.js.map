{"version":3,"sources":["../src/index.js"],"names":["fs","require","http","path","methods","express","bodyParser","session","cors","passport","errorhandler","mongoose","isProduction","process","env","NODE_ENV","app","use","urlencoded","extended","json","__dirname","secret","cookie","maxAge","resave","saveUninitialized","connect","MONGODB_URI","set","req","res","next","err","Error","status","console","log","stack","errors","message","error","server","listen","PORT","address","port"],"mappings":"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","sourcesContent":["const fs = require(\"fs\"),\n    http = require(\"http\"),\n    path = require(\"path\"),\n    methods = require(\"methods\"),\n    express = require(\"express\"),\n    bodyParser = require(\"body-parser\"),\n    session = require(\"express-session\"),\n    cors = require(\"cors\"),\n    passport = require(\"passport\"),\n    errorhandler = require(\"errorhandler\"),\n    mongoose = require(\"mongoose\");\n\nconst isProduction = process.env.NODE_ENV === \"production\";\n\n// Create global app object\nconst app = express();\n\napp.use(cors());\n\n// Normal express config defaults\napp.use(require(\"morgan\")(\"dev\"));\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\n\napp.use(require(\"method-override\")());\napp.use(express.static(__dirname + \"/public\"));\n\napp.use(\n    session({\n        secret: \"authorshaven\",\n        cookie: { maxAge: 60000 },\n        resave: false,\n        saveUninitialized: false\n    })\n);\n\nif (!isProduction) {\n    app.use(errorhandler());\n}\n\nif (isProduction) {\n    mongoose.connect(process.env.MONGODB_URI);\n} else {\n    mongoose.connect(\"mongodb://localhost/conduit\");\n    mongoose.set(\"debug\", true);\n}\n\nrequire(\"./models/User\");\n\napp.use(require(\"./routes\"));\n\n/// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n    const err = new Error(\"Not Found\");\n    err.status = 404;\n    next(err);\n});\n\n/// error handlers\n\n// development error handler\n// will print stacktrace\nif (!isProduction) {\n    app.use(function(err, req, res, next) {\n        console.log(err.stack);\n\n        res.status(err.status || 500);\n\n        res.json({\n            errors: {\n                message: err.message,\n                error: err\n            }\n        });\n    });\n}\n\n// production error handler\n// no stacktraces leaked to user\napp.use(function(err, req, res, next) {\n    res.status(err.status || 500);\n    res.json({\n        errors: {\n            message: err.message,\n            error: {}\n        }\n    });\n});\n\n// finally, let's start our server...\nconst server = app.listen(process.env.PORT || 3000, function() {\n    console.log(\"Listening on port \" + server.address().port);\n});\n"],"file":"index.js"}