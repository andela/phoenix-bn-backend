components:
    schemas:
      User:
        type: object
        properties:
          id:
            type: integer
            description: User's id
            example: '3'
          firstName:
            type: string
            example: John
          lastName:
            type: string
            description: User's first name
            example: Doe
          email:
            type: string
            description: User's email
            example: johndoe@company.com
          password:
            type: string
            description: User's password
            exmaple: 45678hpkfg45
          phoneNumber:
            type: string
            description: Address of WeTravel User
            example: '09023232322'
      AddUser:
        type: object
        properties:
          firstName:
            type: string
            example: John
          lastName:
            type: string
            description: User's first name
            example: Doe
          email:
            type: string
            description: User's email
            example: johndoe@company.com
          password:
            type: string
            description: User's password
            exmaple: 45678hpkfg45
          phoneNumber:
            type: string
            description: Address of WeTravel User
            example: '09023232322'
      SigninUser:
        type: object
        properties:
          email:
            type: string
            example: johndoe@mail.com
          password:
            type: string
            description: User password
            example: 45678hpkfg45
      SignedUser:
        type: object
        properties:
          token:
            $ref: '#/components/schemas/Token'
      Token:
        type: string
        description: Authentication token
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwiZW1haWwiOiJ0aG9ueUBnbWFpbC5jb20iLCJpc0FkbWluIjpmYWxzZSwiaWF0IjoxNTYxMTYyMTY0LCJleHAiOjE1NjEyNDg1NjR9.jx2qbXyui03Dhb9F8iwwbMel9LMYIShLYr5Y5y94BtU
      AuthToken:
        type: string
        description: bearer token sent along with request
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwiZW1haWwiOiJ0aG9ueUBnbWFpbC5jb20iLCJpc0FkbWluIjpmYWxzZSwiaWF0IjoxNTYxMTYyMTY0LCJleHAiOjE1NjEyNDg1NjR9.jx2qbXyui03Dhb9F8iwwbMel9LMYIShLYr5Y5y94BtU
paths: 
  /auth/signin: # signin endpoint
    post: 
      tags:
        - User
      description: 'Logs user into the system'
      operationId: 'loginUser'
      parameters: []
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#components/schemas/SigninUser'
        required: true
      responses: 
        '200': 
          description: Successful operation user login
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: 200 success status code
                    example: '200'
                  data:
                    $ref: '#/components/schemas/SignedUser'
        '400':
          description: Response for an unsuccessful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: 400 error status code
                    example: '400'
                  error: 
                    type: object/string
                    example: 'Invalid email/password'
  /auth/user: # authorize user endpoint
    post:
      tags:
        - User
      description: 'admin adds a new user to the app'
      operationId: 'addUser'
      parameters:
        - name: Authorization
          in: header
          description: Authorization header with jwt token
          required: true
          schema:
            $ref: '#/components/schemas/AuthToken'
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#components/schemas/AddUser'
        required: true
      responses:
        '201':
          description: user successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: 201 success status code
                    example: '201'
                  data:
                    $ref: '#/components/schemas/User'
        '409':
          description: Response gotten when user already exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: 409 error status code
                    example: '409'
                  error: 
                    type: object/string
                    example: 'Invalid carId'